logo
搭建指南
开发指南
扣子专业版
搜索
目录
大纲
API 和 SDK
API 参考
API 介绍
更新日志
准备工作
鉴权
接口
API 概览
空间
智能体
会话
消息
对话
发起对话
查看对话详情
查看对话消息详情
提交工具执行结果
取消进行中的对话
文件
工作流
知识库
语音
错误码
历史版本接口
最佳实践
SDK 参考
发起对话
调用此接口发起一次对话，支持添加上下文和流式响应。​
会话、对话和消息的概念说明，可参考​基础概念。​
接口说明​
发起对话接口用于向指定智能体发起一次对话，支持在对话时添加对话的上下文消息，以便智能体基于历史消息做出合理的回复。开发者可以按需选择响应方式，即流式或非流式响应，响应方式决定了开发者获取智能体回复的方式。关于获取智能体回复的详细说明可参考​通过对话接口获取智能体回复。​
流式响应：智能体在生成回复的同时，将回复消息以数据流的形式逐条发送给客户端。处理结束后，服务端会返回一条完整的智能体回复。详细说明可参考​流式响应。​
非流式响应：无论对话是否处理完毕，立即发送响应消息。开发者可以通过接口​查看对话详情确认本次对话处理结束后，再调用​查看对话消息详情接口查看模型回复等完整响应内容。详细说明可参考​非流式响应。​
基础信息​
​
请求方式​
POST​
请求地址​
​
 https://api.coze.cn/v3/chat​
​
权限​
chat​
确保调用该接口使用的个人令牌开通了 chat 权限，详细信息参考​鉴权方式。​
接口说明​
调用此接口发起一次对话，支持添加上下文和流式响应。​
​
Header​
​
参数​
取值​
说明​
Authorization​
Bearer $Access_Token​
用于验证客户端身份的访问令牌。你可以在扣子平台中生成访问令牌，详细信息，参考​准备工作。​
Content-Type​
application/json​
解释请求正文的方式。​
​
​
​
Query​
​
参数​
类型​
是否必选​
说明​
conversation_id​
String​
可选​
标识对话发生在哪一次会话中。​
会话是智能体和用户之间的一段问答交互。一个会话包含一条或多条消息。对话是会话中对智能体的一次调用，智能体会将对话中产生的消息添加到会话中。​
可以使用已创建的会话，会话中已存在的消息将作为上下文传递给模型。创建会话的方式可参考​创建会话。​
对于一问一答等不需要区分 conversation 的场合可不传该参数，系统会自动生成一个会话。 ​
一个会话中，只能有一个进行中的对话，否则调用此接口时会报错 4016。​
​
​
Body​
​
参数​
类型​
是否必选​
说明​
bot_id​
String​
必选​
要进行会话聊天的智能体ID。​
进入智能体的 开发页面，开发页面 URL 中 bot 参数后的数字就是智能体ID。例如https://www.coze.cn/space/341****/bot/73428668*****，智能体ID 为73428668*****。​
确保当前使用的访问密钥已被授予智能体所属空间的 chat 权限。​
​
user_id​
String​
必选​
标识当前与智能体的用户，由使用方自行定义、生成与维护。user_id 用于标识对话中的不同用户，不同的 user_id，其对话的上下文消息、数据库等对话记忆数据互相隔离。如果不需要用户数据隔离，可将此参数固定为一个任意字符串，例如 123，abc 等。​
出于数据隐私及信息安全等方面的考虑，不建议使用业务系统中定义的用户 ID。​
​
additional_messages​
​
​
Array of object​
​
可选​
​
对话的附加信息。你可以通过此字段传入历史消息和本次对话中用户的问题。数组长度限制为 100，即最多传入 100 条消息。​
若未设置 additional_messages，智能体收到的消息只有会话中已有的消息内容，其中最后一条作为本次对话的用户输入，其他内容均为本次对话的上下文。​
若设置了 additional_messages，智能体收到的消息包括会话中已有的消息和 additional_messages 中添加的消息，其中 additional_messages 最后一条消息会作为本次对话的用户输入，其他内容均为本次对话的上下文。​
消息结构可参考​EnterMessage Object，具体示例可参考​携带上下文。​
会话或 additional_messages 中最后一条消息应为 role=user 的记录，以免影响模型效果。​
如果本次对话未指定会话或指定的会话中无消息时，必须通过此参数传入智能体用户的问题。​
​
stream​
​
Boolean​
​
可选​
​
是否启用流式返回。​
true：采用流式响应。 “流式响应”将模型的实时响应提供给客户端，类似打字机效果。你可以实时获取服务端返回的对话、消息事件，并在客户端中同步处理、实时展示，也可以直接在 completed 事件中获取智能体最终的回复。​
false：（默认）采用非流式响应。 “非流式响应”是指响应中仅包含本次对话的状态等元数据。此时应同时开启 auto_save_history，在本次对话处理结束后再查看模型回复等完整响应内容。可以参考以下业务流程：​
调用发起对话接口，并设置 stream = false，auto_save_history=true，表示使用非流式响应，并记录历史消息。​
你需要记录会话的 Conversation ID 和 Chat ID，用于后续查看详细信息。​
定期轮询​查看对话详情接口，建议每次间隔 1 秒以上，直到会话状态流转为终态，即 status 为 completed、required_action、canceled 或 failed。​
调用​查看对话消息详情接口，查询大模型生成的最终结果。​
custom_variables​
Map<String, String>​
可选​
智能体中定义的变量。在智能体prompt 中设置变量 {{key}} 后，可以通过该参数传入变量值，同时支持 Jinja2 语法。详细说明可参考​变量示例。​
变量名只支持英文字母和下划线。​
​
auto_save_history​
​
Boolean​
​
可选​
是否保存本次对话记录。​
true：（默认）会话中保存本次对话记录，包括 additional_messages 中指定的所有消息、本次对话的模型回复结果、模型执行中间结果。​
false：会话中不保存本次对话记录，后续也无法通过任何方式查看本次对话信息、消息详情。在同一个会话中再次发起对话时，本次会话也不会作为上下文传递给模型。​
非流式响应下（stream=false），此参数必须设置为 true，即保存本次对话记录，否则无法查看对话状态和模型回复。​
​
meta_data​
Map​
可选​
附加信息，通常用于封装一些业务相关的字段。查看对话消息详情时，系统会透传此附加信息。​
自定义键值对，应指定为 Map 对象格式。长度为 16 对键值对，其中键（key）的长度范围为 1～64 个字符，值（value）的长度范围为 1～512 个字符。​
extra_params​
Map<String, String>​
可选​
附加参数，通常用于特殊场景下指定一些必要参数供模型判断，例如指定经纬度，并询问智能体此位置的天气。​
自定义键值对格式，其中键（key）仅支持设置为：​
latitude：纬度，此时值（Value）为纬度值，例如 39.9800718。​
longitude：经度，此时值（Value）为经度值，例如 116.309314。​
​
EnterMessage Object​
​
参数​
类型​
是否必选​
说明​
role​
String​
必选​
发送这条消息的实体。取值：​
user：代表该条消息内容是用户发送的。​
assistant：代表该条消息内容是 智能体发送的。​
type​
​
String​
可选​
​
消息类型。默认为 question。​
question：用户输入内容。​
answer：智能体返回给用户的消息内容，支持增量返回。如果工作流绑定了消息节点，可能会存在多 answer 场景，此时可以用流式返回的结束标志来判断所有 answer 完成。​
function_call：智能体对话过程中调用函数（function call）的中间结果。 ​
tool_output：调用工具 （function call）后返回的结果。​
tool_response：调用工具 （function call）后返回的结果。​
follow_up：如果在 智能体上配置打开了用户问题建议开关，则会返回推荐问题相关的回复内容。不支持在请求中作为入参。​
verbose：多 answer 场景下，服务端会返回一个 verbose 包，对应的 content 为 JSON 格式，content.msg_type =generate_answer_finish 代表全部 answer 回复完成。不支持在请求中作为入参。​
仅发起会话（v3）接口支持将此参数作为入参，且：​
如果 autoSaveHistory=true，type 支持设置为 question 或 answer。​
如果 autoSaveHistory=false，type 支持设置为 question、answer、function_call、tool_output/tool_response。​
其中，type=question 只能和 role=user 对应，即仅用户角色可以且只能发起 question 类型的消息。详细说明可参考​消息 type 说明。​
​
content​
String​
可选​
消息的内容，支持纯文本、多模态（文本、图片、文件混合输入）、卡片等多种类型的内容。​
content_type 为 object_string 时，content 为 object_string object 数组序列化之后的 JSON String，详细说明可参考 object_string object。​
当 content_type = text 时，content 为普通文本，例如 "content" :"Hello!"。​
content_type​
String​
可选​
消息内容的类型，支持设置为：​
text：文本。​
object_string：多模态内容，即文本和文件的组合、文本和图片的组合。​
card：卡片。此枚举值仅在接口响应中出现，不支持作为入参。​
content 不为空时，此参数为必选。​
​
 meta_data​
Map ​
可选​
创建消息时的附加消息，获取消息时也会返回此附加消息。​
自定义键值对，应指定为 Map 对象格式。长度为 16 对键值对，其中键（key）的长度范围为 1～64 个字符，值（value）的长度范围为 1～512 个字符。​
​
object_string object​
​
参数​
类型​
是否必选​
说明​
type​
String​
必选​
多模态消息内容类型，支持设置为：​
text：文本类型。​
file：文件类型。​
image：图片类型。​
text​
String​
可选​
文本内容。​
file_id​
String​
可选​
文件或图片内容的 ID。​
必须是当前账号上传的文件 ID，上传方式可参考​上传文件。​
在 type 为 file 或 image 时，file_id 和 file_url 应至少指定一个。​
​
file_url​
String​
可选​
文件或图片内容的在线地址。必须是可公共访问的有效地址。​
在 type 为 file 或 image 时，file_id 和 file_url 应至少指定一个。​
​
一个数组中只能有一个 Text 类型消息，但可以有多个 file、image 类型的消息。​
object_string 中，text 需要与 file 或 image 一起使用。如果消息内容只有 text 类型，建议直接指定 content_type: text，不使用 object_string。​
支持发送纯图片或纯文件消息，但此类消息前后应同时传入一条文本消息作为用户 Query。例如 "content": "[{\"type\":\"image\",\"file_id\":\"{{file_id_1}}\"}]" 为一条纯图片消息，且前后无文本消息，此时接口会报 4000 参数错误。​
​
例如，以下数组是一个完整的多模态内容：​
序列化前：​
​
[​
    {​
        "type": "text",​
        "text": "你好我有一个帽衫，我想问问它好看么，你帮我看看"​
    }, {​
        "type": "image",​
        "file_id": "{{file_id_1}}"​
    }, {​
        "type": "file",​
        "file_id": "{{file_id_2}}"​
    },​
        {​
        "type": "file",​
        "file_url": "{{file_url_1}}"​
    }​
]​
​
序列化后：​
​
"[{\"type\":\"text\",\"text\":\"你好我有一个帽衫，我想问问它好看么，你帮我看看\"},{\"type\":\"image\",\"file_id\":\"{{file_id_1}}\"},{\"type\":\"file\",\"file_id\":\"{{file_id_2}}\"},{\"type\":\"file\",\"file_url\":\"{{file_url_1}}\"}]"​
​
​
​
消息结构示例​
文本消息的 content_type 为 text，消息结构示例如下。​
​
{​
    "role": "user",​
    "content": "搜几个最新的军事新闻",​
    "content_type": "text"​
}​
​
​
​
返回结果​
此接口通过请求 Body 参数 stream 为 true 或 false 来指定 Response 为流式或非流式响应。你可以根据以下步骤判断当前业务场景适合的响应模式。​
​
​
流式响应​
在流式响应中，服务端不会一次性发送所有数据，而是以数据流的形式逐条发送数据给客户端，数据流中包含对话过程中触发的各种事件（event），直至处理完毕或处理中断。处理结束后，服务端会通过 conversation.message.completed 事件返回拼接后完整的模型回复信息。各个事件的说明可参考流式响应事件。​
流式响应允许客户端在接收到完整的数据流之前就开始处理数据，例如在对话界面实时展示智能体的回复内容，减少客户端等待模型完整回复的时间。​
流式响应的整体流程如下：​
​
######### 整体概览 （chat, MESSAGE 两级）​
# chat - 开始​
# chat - 处理中​
#   MESSAGE - 知识库召回​
#   MESSAGE - function_call​
#   MESSAGE - tool_output​
#   MESSAGE - answer is card​
#   MESSAGE - answer is normal text​
#   MESSAGE - 多 answer 的情况下，会继续有 message.delta​
#   MESSAGE - verbose （多 answer、Multi-agent 跳转等场景）​
#   MESSAGE - suggestion​
# chat - 完成​
# 流结束 event: done​
#########​
​
​
返回的事件消息体结构如下：​
​
参数​
类型​
说明​
event​
String​
当前流式返回的数据包事件。详细说明可参考 流式响应事件。​
data​
Object​
消息内容。其中，chat 事件和 message 事件的格式不同。​
chat 事件中，data 为 Chat Object。​
message 事件中，data 为 Message Object。​
​
流式响应事件​
​
事件（event）名称​
说明​
conversation.chat.created​
创建对话的事件，表示对话开始。​
conversation.chat.in_progress​
服务端正在处理对话。​
conversation.message.delta​
增量消息，通常是 type=answer 时的增量消息。​
conversation.message.completed​
message 已回复完成。此时流式包中带有所有 message.delta 的拼接结果，且每个消息均为 completed 状态。​
conversation.chat.completed​
对话完成。​
conversation.chat.failed​
此事件用于标识对话失败。​
conversation.chat.requires_action​
对话中断，需要使用方上报工具的执行结果。​
error​
流式响应过程中的错误事件。关于 code 和 msg 的详细说明，可参考​错误码。​
done​
本次会话的流式返回正常结束。​
​
非流式响应​
在非流式响应中，无论服务端是否处理完毕，立即发送响应消息。其中包括本次对话的 chat_id、状态等元数据信息，但不包括模型处理的最终结果。​
非流式响应不需要维持长连接，在场景实现上更简单，但通常需要客户端主动查询对话状态和消息详情才能得到完整的数据。你可以通过接口​查看对话详情确认本次对话处理结束后，再调用​查看对话消息详情接口查看模型回复等完整响应内容。流程如下：​
​
​​

​
​
非流式响应的结构如下：​
​
参数​
类型​
说明​
data​
Object​
本次对话的基本信息。详细说明可参考 Chat Object。​
code​
Integer​
状态码。​
0 代表调用成功。​
msg​
String​
状态信息。API 调用失败时可通过此字段查看详细错误信息。​
​
​
​
Chat Object​
​
参数​
类型​
是否可选​
说明​
id​
String​
必填​
对话 ID，即对话的唯一标识。​
conversation_id​
String​
必填​
会话 ID，即会话的唯一标识。​
bot_id​
String​
必填​
要进行会话聊天的智能体 ID。​
created_at​
Integer​
选填​
对话创建的时间。格式为 10 位的 Unixtime 时间戳，单位为秒。​
completed_at​
Integer​
选填​
对话结束的时间。格式为 10 位的 Unixtime 时间戳，单位为秒。​
failed_at​
Integer​
选填​
对话失败的时间。格式为 10 位的 Unixtime 时间戳，单位为秒。​
meta_data​
Map<String,String>​
选填​
创建消息时的附加消息，用于传入使用方的自定义数据，获取消息时也会返回此附加消息。​
自定义键值对，应指定为 Map 对象格式。长度为 16 对键值对，其中键（key）的长度范围为 1～64 个字符，值（value）的长度范围为 1～512 个字符。​
last_error​
​
Object​
选填​
对话运行异常时，此字段中返回详细的错误信息，包括：​
Code：错误码。Integer 类型。0 表示成功，其他值表示失败。​
Msg：错误信息。String 类型。​
对话正常运行时，此字段返回 null。​
suggestion 失败不会被标记为运行异常，不计入 last_error。​
​
status​
​
String​
必填​
对话的运行状态。取值为：​
created：对话已创建。​
in_progress：智能体正在处理中。​
completed：智能体已完成处理，本次对话结束。​
failed：对话失败。​
requires_action：对话中断，需要进一步处理。​
canceled：对话已取消。​
required_action​
Object​
选填​
需要运行的信息详情。​
» type​
String​
选填​
额外操作的类型，枚举值为 submit_tool_outputs。​
»submit_tool_outputs​
Object​
选填​
需要提交的结果详情，通过提交接口上传，并可以继续聊天​
»» tool_calls​
Array of Object​
选填​
具体上报信息详情。​
»»» id​
String​
选填​
上报运行结果的 ID。​
»»» type​
String​
选填​
工具类型，枚举值为 function。​
»»» function​
Object​
选填​
执行方法 function 的定义。​
»»»» name​
String​
选填​
方法名。​
»»»» arguments​
String​
选填​
方法参数。​
usage​
Object​
选填​
Token 消耗的详细信息。实际的 Token 消耗以对话结束后返回的值为准。​
»token_count​
Integer​
选填​
本次对话消耗的 Token 总数，包括 input 和 output 部分的消耗。​
»output_count​
Integer​
选填​
output 部分消耗的 Token 总数。​
»input_count​
Integer​
选填​
input 部分消耗的 Token 总数。​
​
Chat Object 的示例如下：​
​
{​
// 在 chat 事件里，data 字段中的 id 为 Chat ID，即会话 ID。​
    "id": "737662389258662****",​
    "conversation_id": "737554565555041****",​
    "bot_id": "736661612448078****",​
    "completed_at": 1717508113,​
    "last_error": {​
        "code": 0,​
        "msg": ""​
    },​
    "status": "completed",​
    "usage": {​
        "token_count": 6644,​
        "output_count": 766,​
        "input_count": 5878​
    }​
}​
​
​
​
​
Message Object​
​
参数​
类型​
说明​
id​
String​
Message ID，即消息的唯一标识。​
conversation_id​
String​
此消息所在的会话 ID。​
bot_id​
String​
编写此消息的智能体ID。此参数仅在对话产生的消息中返回。​
chat_id​
String​
Chat ID。此参数仅在对话产生的消息中返回。​
meta_data​
Map​
创建消息时的附加消息，获取消息时也会返回此附加消息。​
role​
String​
发送这条消息的实体。取值：​
user：代表该条消息内容是用户发送的。​
assistant：代表该条消息内容是智能体发送的。​
content​
String​
​
消息的内容，支持纯文本、多模态（文本、图片、文件混合输入）、卡片等多种类型的内容。​
content_type​
String​
消息内容的类型，取值包括：​
text：文本。​
object_string：多模态内容，即文本和文件的组合、文本和图片的组合。​
card：卡片。此枚举值仅在接口响应中出现，不支持作为入参。​
created_at​
Integer​
消息的创建时间，格式为 10 位的 Unixtime 时间戳，单位为秒（s）。​
updated_at​
Integer​
消息的更新时间，格式为 10 位的 Unixtime 时间戳，单位为秒（s）。​
type​
String​
消息类型。​
question：用户输入内容。​
answer：智能体返回给用户的消息内容，支持增量返回。如果工作流绑定了 messge 节点，可能会存在多 answer 场景，此时可以用流式返回的结束标志来判断所有 answer 完成。​
function_call：智能体对话过程中调用函数（function call）的中间结果。 ​
tool_output：调用工具 （function call）后返回的结果。​
tool_response：调用工具 （function call）后返回的结果。​
follow_up：如果在智能体上配置打开了用户问题建议开关，则会返回推荐问题相关的回复内容。​
verbose：多 answer 场景下，服务端会返回一个 verbose 包，对应的 content 为 JSON 格式，content.msg_type =generate_answer_finish 代表全部 answer 回复完成。​
仅发起会话（v3）接口支持将此参数作为入参，且：​
如果 autoSaveHistory=true，type 支持设置为 question 或 answer。​
如果 autoSaveHistory=false，type 支持设置为 question、answer、function_call、tool_output/tool_response。​
其中，type=question 只能和 role=user 对应，即仅用户角色可以且只能发起 question 类型的消息。详细说明可参考​消息 type 说明。​
​
​
​
​
示例​
流式响应​
Request​
​
curl --location --request POST 'https://api.coze.cn/v3/chat?conversation_id=7374752000116113452' \​
--header 'Authorization: Bearer pat_OYDacMzM3WyOWV3Dtj2bHRMymzxP****' \​
--header 'Content-Type: application/json' \​
--data-raw '{​
    "bot_id": "734829333445931****",​
    "user_id": "123456789",​
    "stream": true,​
    "auto_save_history":true,​
    "additional_messages":[​
        {​
            "role":"user",​
            "content":"2024年10月1日是星期几",​
            "content_type":"text"​
        }​
    ]​
}'​
​
Response​
​
event:conversation.chat.created​
// 在 chat 事件里，data 字段中的 id 为 Chat ID，即会话 ID。​
data:{"id":"7382159487131697202","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","completed_at":1718792949,"last_error":{"code":0,"msg":""},"status":"created","usage":{"token_count":0,"output_count":0,"input_count":0}}​
​
event:conversation.chat.in_progress​
data:{"id":"7382159487131697202","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","completed_at":1718792949,"last_error":{"code":0,"msg":""},"status":"in_progress","usage":{"token_count":0,"output_count":0,"input_count":0}}​
​
event:conversation.message.delta​
data:{"id":"7382159494123470858","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","role":"assistant","type":"answer","content":"2","content_type":"text","chat_id":"7382159487131697202"}​
​
event:conversation.message.delta​
data:{"id":"7382159494123470858","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","role":"assistant","type":"answer","content":"0","content_type":"text","chat_id":"7382159487131697202"}​
​
//省略模型回复的部分中间事件event:conversation.message.delta​
......​
​
event:conversation.message.delta​
data:{"id":"7382159494123470858","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","role":"assistant","type":"answer","content":"星期三","content_type":"text","chat_id":"7382159487131697202"}​
​
event:conversation.message.delta​
data:{"id":"7382159494123470858","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","role":"assistant","type":"answer","content":"。","content_type":"text","chat_id":"7382159487131697202"}​
​
event:conversation.message.completed​
data:{"id":"7382159494123470858","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","role":"assistant","type":"answer","content":"2024 年 10 月 1 日是星期三。","content_type":"text","chat_id":"7382159487131697202"}​
​
event:conversation.message.completed​
data:{"id":"7382159494123552778","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","role":"assistant","type":"verbose","content":"{\"msg_type\":\"generate_answer_finish\",\"data\":\"\",\"from_module\":null,\"from_unit\":null}","content_type":"text","chat_id":"7382159487131697202"}​
​
event:conversation.chat.completed​
data:{"id":"7382159487131697202","conversation_id":"7381473525342978089","bot_id":"7379462189365198898","completed_at":1718792949,"last_error":{"code":0,"msg":""},"status":"completed","usage":{"token_count":633,"output_count":19,"input_count":614}}​
​
event:done​
data:"[DONE]"​
​
​
非流式响应​
Request​
​
curl --location --request POST 'https://api.coze.cn/v3/chat?conversation_id=737475200011611****' \​
--header 'Authorization: Bearer pat_OYDacMzM3WyOWV3Dtj2bHRMymzxP****' \​
--header 'Content-Type: application/json' \​
--data-raw '{​
    "bot_id": "734829333445931****",​
    "user_id": "123456789",​
    "stream": false,​
    "auto_save_history":true,​
    "additional_messages":[​
        {​
            "role":"user",​
            "content":"今天杭州天气如何",​
            "content_type":"text"​
        }​
    ]​
}'​
​
Response​
​
{​
    "data":{​
    // data 字段中的 id 为 Chat ID，即会话 ID。​
        "id": "123",​
        "conversation_id": "123456",​
        "bot_id": "222",​
        "created_at": 1710348675,​
        "completed_at": 1710348675,​
        "last_error": null,​
        "meta_data": {},​
        "status": "completed",​
        "usage": {​
            "token_count": 3397,​
            "output_count": 1173,​
            "input_count": 2224​
        }​
    },​
    "code":0,​
    "msg":""​
}​
​
​
Prompt 变量​
例如在智能体的 Prompt 中定义了一个 {{bot_name}} 的变量，在调用接口时，可以通过 custom_variables 参数传入变量值。​
智能体Prompt 配置示例：​
​
​​

​
​
API 调用示例：​
​
​​

​
​
​
扣子也支持 Jinja2 语法。在下面这个模板中，prompt1 将在 key 变量存在时使用，而 prompt2 将在 key 变量不存在时使用。通过在 custom_variables 中传递 key 的值，你可以控制智能体的响应。​
​
{% if key -%}​
prompt1​
{%- else %}​
prompt2​
{% endif %}​
​
智能体Prompt 配置示例：​
​
​​

​
​
API 调用示例：​
​
​​

​
​
​
携带上下文​
你可以在发起对话时把多条消息作为上下文一起上传，模型会参考上下文消息，对用户 Query 进行针对性回复。在发起对话时，扣子会将以下内容作为上下文传递给模型。​
会话中的消息：调用发起对话接口时，如果指定了会话 ID，会话中已有的消息会作为上下文传递给模型。​
additional_messages 中的消息：如果 additional_messages 中有多条消息，则最后一条会作为本次用户 Query，其他消息为上下文。​
扣子推荐你通过以下方式在对话中指定上下文：​
​
方式​
说明​
方式一：通过会话传递历史消息，通过 additional_messages 指定用户 Query​
适用于在已有会话中再次发起对话的场景，会话中通常已经存在部分历史消息，开发者也可以手动插入一些消息作为上下文。​
方式二：通过 additional_messages 指定历史消息和用户 Query​
此方式无需提前创建会话，通过发起对话一个接口即可完成一次携带上下文的对话，更适用于一问一答的场景，使用方式更加简便。​
​
以方式一为例，在对话中携带上下文的操作步骤如下：​
准备上下文消息。​
准备上下文消息时应注意：​
应包含用户询问和模型返回两部分消息数据。详情可参考返回参数内容中 Message 消息结构的具体说明。​
上下文消息列表按时间递增排序，即最近一条 message 在列表的最后一位。​
只需传入用户输入内容及模型返回内容即可，即 role=user 和 role=assistant; type=answer。​
​
以下消息列表是一个完整的上下文消息。其中：​
第 2 行是用户传入的历史消息​
第 4 行是模型返回的历史消息​
​
[​
{ "role": "user", "content_type":"text", "content": "你可以读懂图片中的内容吗" }​
​
{"role":"assistant","type":"answer","content":"没问题！你想查看什么图片呢？"，"content_type":"text"}​
]​
​
调用​创建会话接口创建一个会话，其中包含以上两条消息，并记录会话 ID。​
请求示例如下：​
​
curl --location --request POST 'https://api.coze.cn/v1/conversation/create' \​
--header 'Authorization: Bearer pat_OYDacMzM3WyOWV3Dtj2bHRMymzxP****' \​
--header 'Content-Type: application/json' \​
--data-raw '{​
    "meta_data": {​
        "uuid": "newid1234"​
    },​
   "messages": [​
        {​
            "role": "user",​
            "content":"你可以读懂图片中的内容吗",​
            "content_type":"text"​
        },​
        {​
            "role": "assistant",​
            "type":"answer",​
            "content": "没问题！你想查看什么图片呢？",​
            "content_type":"text"​
        }​
    ]​
}'​
​
调用发起对话（V3）接口，并指定会话 ID。​
在对话中可以通过 additional_messages 增加本次对话的 query。这些消息会和对话中已有的消息一起作为上下文被传递给大模型。​
​
curl --location --request POST 'https://api.coze.cn/v3/chat?conversation_id=737363834493434****' \​
--header 'Authorization: Bearer pat_OYDacMzM3WyOWV3Dtj2bHRMymzxP****' \​
--header 'Content-Type: application/json' \​
--data-raw '{​
    "bot_id": "734829333445931****",​
    "user_id": "123456789",​
    "stream": false,​
    "auto_save_history":true,​
    "additional_messages":[​
        {​
            "role":"user",​
            "content":"[{\"type\":\"image\",\"file_url\":\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fci.xiaohongshu.com%2Fe7368218-8a64-bda3-56ad-5672b2a113b2%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fci.xiaohongshu.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1720005307&t=1acd734e6e8937c2d77d625bcdb0dc57\"},{\"type\":\"text\",\"text\":\"这张可以吗\"}]",​
            "content_type":"object_string"​
        }​
    ]​
}'​
​
调用接口​查看对话消息详情查看模型回复。​
你可以从智能体的回复中看出这一次会话是符合上下文语境的。响应信息如下：​
​
{​
    "code": 0,​
    "data": [​
        {​
            "bot_id": "737946218936519****",​
            "content": "{\"name\":\"tupianlijie-imgUnderstand\",\"arguments\":{\"text\":\"图中是什么内容\",\"url\":\"https://lf-bot-studio-plugin-resource.coze.cn/obj/bot-studio-platform-plugin-tos/artist/image/4ca71a5f55d54efc95ed9c06e019ff4b.png\"},\"plugin_id\":7379227414322217010,\"api_id\":7379227414322233394,\"plugin_type\":1,\"thought\":\"需求为识别图中（https://lf-bot-studio-plugin-resource.coze.cn/obj/bot-studio-platform-plugin-tos/artist/image/4ca71a5f55d54efc95ed9c06e019ff4b.png）的内容，需要调用tupianlijie-imgUnderstand进行识别\"}",​
            "content_type": "text",​
            "conversation_id": "738147352534297****",​
            "id": "7381473945440239668",​
            "role": "assistant",​
            "type": "function_call"​
        },​
        {​
            "bot_id": "7379462189365198898",​
            "content": "{\"content_type\":1,\"response_for_model\":\"图中展示的是一片茂密的树林。\",\"type_for_model\":1}",​
            "content_type": "text",​
            "conversation_id": "738147352534297****",​
            "id": "7381473964905807872",​
            "role": "assistant",​
            "type": "tool_response"​
        },​
        {​
            "bot_id": "7379462189365198898",​
            "content": "{\"msg_type\":\"generate_answer_finish\",\"data\":\"\",\"from_module\":null,\"from_unit\":null}",​
            "content_type": "text",​
            "conversation_id": "738147352534297****",​
            "id": "7381473964905906176",​
            "role": "assistant",​
            "type": "verbose"​
        },​
        {​
            "bot_id": "7379462189365198898",​
            "content": "这幅图展示的是一片茂密的树林。",​
            "content_type": "text",​
            "conversation_id": "738147352534297****",​
            "id": "7381473945440223284",​
            "role": "assistant",​
            "type": "answer"​
        }​
    ],​
    "msg": ""​
}​
​
​
上一篇
下一篇

接口说明
基础信息
Header
Query
Body
EnterMessage Object
object_string object
消息结构示例
返回结果
流式响应
流式响应事件
非流式响应
Chat Object
Message Object
示例
流式响应
非流式响应
Prompt 变量
携带上下文
